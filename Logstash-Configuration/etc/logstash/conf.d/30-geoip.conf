# 30-geoip.conf
##########################################################
# To leverage MaxMind, remove all instances of "#MMR#"   #
# No changes required for built-in GeoIP                 #
##########################################################
filter {
  if [observer][type] == "firewall" or [observer][type] == "suricata" {
    if [source][ip] {
      ### Check if source.ip address is private
      cidr {
        address => [ "%{[source][ip]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
        add_tag => "IP_Private_Source"
      }
      if "IP_Private_Source" not in [tags] {
        geoip {
          source => "[source][ip]"
#MMR#          database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
          target => "[source][geo]"
        }
        geoip {
          default_database_type => 'ASN'
#MMR#          database => "/usr/share/GeoIP/GeoLite2-ASN.mmdb"
          source => "[source][ip]"
          target => "[source][as]"
        }
        mutate {
          rename => { "[source][as][asn]" => "[source][as][number]"}
          rename => { "[source][as][as_org]" => "[source][as][organization][name]"}
          rename => { "[source][geo][country_code2]" => "[source][geo][country_iso_code]"}
          rename => { "[source][geo][region_code]" => "[source][geo][region_iso_code]"}
          add_tag => "GeoIP_Source"
        }
      }
    }
    if [destination][ip] {
      ### Check if destination.ip address is private
      cidr {
        address => [ "%{[destination][ip]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
        add_tag => "IP_Private_Destination"
      }
      if "IP_Private_Destination" not in [tags] {
        geoip {
          source => "[destination][ip]"
#MMR#          database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
          target => "[destination][geo]"
        }
        geoip {
          default_database_type => 'ASN'
#MMR#          database => "/usr/share/GeoIP/GeoLite2-ASN.mmdb"
          source => "[destination][ip]"
          target => "[destination][as]"
        }
        mutate {
          rename => { "[destination][as][asn]" => "[destination][as][number]"}
          rename => { "[destination][as][as_org]" => "[destination][as][organization][name]"}
          rename => { "[destination][geo][country_code2]" => "[destination][geo][country_iso_code]"}
          rename => { "[destination][geo][region_code]" => "[destination][geo][region_iso_code]"}
          add_tag => "GeoIP_Destination"
        }
      }
    }
  }
  ### HAPROXY ###
  if [type] == "haproxy" {
    if [haproxy][client][ip] {
     # Check if source.ip address is private
      cidr {
        address => [ "%{[haproxy][client][ip]}" ]
        network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10", "224.0.0.0/4", "ff00::/8", "255.255.255.255/32", "::" ]
        add_tag => "IP_Private_HAProxy"
      }
      if "IP_Private_HAProxy" not in [tags] {
        geoip {
          source => "[haproxy][client][ip]"
#MMR#          database => "/usr/share/GeoIP/GeoLite2-City.mmdb"
          target => "[source][geo]"
        }
        geoip {
          default_database_type => 'ASN'
#MMR#          database => "/usr/share/GeoIP/GeoLite2-ASN.mmdb"
          source => "[haproxy][client][ip]"
          target => "[source][as]"
        }
        mutate {
          rename => { "[source][as][asn]" => "[source][as][number]"}
          rename => { "[source][as][as_org]" => "[source][as][organization][name]"}
          rename => { "[source][geo][country_code2]" => "[source][geo][country_iso_code]"}
          rename => { "[source][geo][region_code]" => "[source][geo][region_iso_code]"}
          add_tag => "GeoIP_Source"
        }
      }
    }
  }
}
